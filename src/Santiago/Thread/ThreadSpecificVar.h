#ifndef SANTIAGO_THREAD_THREADSPECIFICVAR_H
#define SANTIAGO_THREAD_THREADSPECIFICVAR_H

#include <functional>
#include <memory>

#include "ThreadSpecificVarImpl.h"

namespace Santiago{ namespace Thread
{
    template<typename T>
    class ThreadSpecificVar
    {
    public:

        typedef std::shared_ptr<ThreadSpecificVarImpl>     ThreadSpecificVarImplPtr;
        typedef std::function<T*()>                        TFactoryFn;

        ThreadSpecificVar(const TFactoryFn& tFactoryFn_):
            _tFactoryFn(tFactoryFn_),
            _implPtr(new ThreadSpecificVarImpl())
	{}
        
        ThreadSpecificVar(const ThreadSpecificVar&) = delete;
        ThreadSpecificVar operator=(const ThreadSpecificVar&) = delete;

        T& get()
        {
            return getImpl();
        }

        const T& get() const
        {
            return getImpl();
        }

        TFactoryFn getTFactoryFn() const
        {
            return _tFactoryFn;
        }

        ~ThreadSpecificVar()
        {
            _implPtr->removeAllReachableThreadData();
            _implPtr.reset();
        }

    private:

        T& getImpl() const
        {
            boost::optional<boost::any> tData = _implPtr->getTData();

            /* 
             * if(tData && !tData->empty())
             * {
             *     std::cout << "tData Not Empty" << std::endl;
             * }
             */
            
            if(!tData)
            {
                std::shared_ptr<T> newTPtr(_tFactoryFn());
                if(!newTPtr)
                {
                    //ST_ASSERT(false);
                    throw std::runtime_error("NULL pointer generated by factory_fn.");
                }
                _implPtr->setTData(boost::any(newTPtr));
                tData = _implPtr->getTData();
            }

            ST_ASSERT(tData);
            std::shared_ptr<T> tPtr;
            try
            {
                tPtr = boost::any_cast<std::shared_ptr<T> >(*tData);
            }
            catch(std::exception& e)
            {
                std::cout<<e.what()<<std::endl;
                ST_ASSERT(false);
            }

            ST_ASSERT(tPtr);
            return (*tPtr);
        }

        TFactoryFn                               _tFactoryFn;
        ThreadSpecificVarImplPtr                 _implPtr;
    };

}}

#endif
